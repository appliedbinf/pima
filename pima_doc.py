#!/usr/bin/env python

import argparse
import os
from python_on_whales import docker
from argparse import ArgumentParser, HelpFormatter
from datetime import datetime
import json
import sys

VERSION = ".7.0"

# THE FOLLOWING LINE IS STATIC and GENERATED BY ANOTHER SCRIPT
Current_SupportedOrganisms = ["bacillus_anthracis", "bacillus_anthracis_STERNE", "burkholderia_psuedomallei", "francisella_tularensis", "francisella_tularensis_LVS", "klebsiella_pneumoniae", "yersinia_pestis", "yersinia_pestis_KIM10+", "yersinia_pestis_KIM5"]
pima_path = os.path.dirname("/home/DockerDir/pima_md/")
amr_database_default = os.path.join(pima_path, 'data/amr.fasta')
amr_gene_drug_tsv = os.path.join(pima_path, 'data/gene_drug.tsv')
inc_database_default = os.path.join(pima_path, 'data/inc.fasta')
included_databases = [amr_database_default, inc_database_default]

plasmid_database_default_fasta = os.path.join(pima_path, 'data/plasmids_and_vectors.fasta')
kraken_database_default = os.path.join(pima_path, 'data/kraken2')
reference_dir_default = os.path.join(pima_path, 'data/reference_sequences')
pima_css = os.path.join(pima_path,'data/pima.css')



# Setup Parser | All arguments are mirrored to base pima
parser = ArgumentParser(prog = "pima_doc.py",
                            add_help = False,
                            description =
                            '''
                            P.I.M.A. bacterial genome analysis pipeline docker
                            ''',
                            formatter_class = lambda prog: HelpFormatter(prog, width = 120, max_help_position = 120))

parser._optionals.title = 'Help and version'
parser.add_argument('--help', action = 'store_true',
                    help = 'Print this help and exit.')
parser.add_argument('--version', action = 'version',
                    help = 'Print the software version.',
                    version = 'PIMA microbial genome analysis pipeline (version {})'.format(VERSION))

# Input arguments
input_group = parser.add_argument_group('Input and basecalilng options')
input_group.add_argument('--ont-watch', required = False, default = None, metavar = '<ONT_DIR>',
                    help = 'Directory from an ONT run.')
input_group.add_argument('--ont-watch-min-reads', required = False, type = int, default = 5000000, metavar = '<INT>',
                    help = 'Minimum number of ONT reads to watch for.' )
input_group.add_argument('--ont-watch-max-time', required = False, type = float, default = 24, metavar = '<HOURS>',
                    help = 'Maxmium time to watch for new reads.' )
input_group.add_argument('--ont-watch-between-time', required = False, type = float, default = 15, metavar = '<MINUTES>',
                    help = 'Maximum to to wait between new FAST5 files')
input_group.add_argument('--ont-watch-min-coverage', required = False, type = float, default = None, metavar = '<X>',
                    help = 'Minimum genome coverage achieved before starting analysis.')
input_group.add_argument('--ont-fast5', required = False, default = None, metavar = '<ONT_DIR>',
                    help = 'Directory containing ONT FAST5 files')
input_group.add_argument('--basecaller', required = False, default = 'guppy', choices = ['guppy'],
                    help = 'The basecaller for ONT FAST5 data (default : %(default)s)')
input_group.add_argument('--ont-fastq', required = False, default = None, metavar = '<FASTQ|GZ>',
                    help = 'File containing basecalled ONT reads')
input_group.add_argument('--multiplexed', required = False, default = False, action = 'store_true',
                    help = 'The ONT data are multiplexed (default : %(default)s)')
input_group.add_argument('--error-correct', required = False, default = False, action = 'store_true',
                    help = 'Use LORMA to  error-correct ONT reads (default : %(default)s)')
input_group.add_argument('--contamination', required = False, default = False, action = 'store_true',
                    help = 'Use Kraken2 to look for contamination in the input read (default : %(default)s)')
input_group.add_argument('--only-basecall', required = False, default = False, action = 'store_true',
                    help = 'Just basecall and demultiplex/trim/correct.  No downstream analysis.')
input_group.add_argument('--illumina-fastq', required = False, default = None, nargs = '+', metavar = '<R1> [R2]',
                    help = 'Files containing R1 & R2 Illumina reads')
input_group.add_argument('--genome', required = False, default = None, metavar = '<GENOME_FASTA>',
                    help = 'A genome FASTA file to be used in place of assembly')
input_group.add_argument("--preloded_reference",type=str,action="store",choices=Current_SupportedOrganisms,
                    help="Select one of the preloaded Reference and Mutation Options")
# Output Groups Arguments
output_group = parser.add_argument_group('Output options')
output_group.add_argument('--output', required = False, default = 'outputdir', metavar = '<OUTPUT_DIR>',
                    help = 'Output directory for the analysis')
output_group.add_argument('--overwrite', required = False, default = False, action = 'store_true',
                    help = 'Overwrite an existing output directory (default : %(default)s)')


# Assembly options
assembly_group = parser.add_argument_group('Assembly options')
assembly_group.add_argument('--assembler', required = False, default = 'flye', type = str,
                    choices = ['wtdbg2', 'flye'],
                    help = 'Assembler to use (default : %(default)s)')
assembly_group.add_argument('--genome-size', required = False, default = None, type = str, metavar = '<GENOME_SIZE>',
                    help = 'Genome size estimate for the assembly & downsampling (default : %(default)s))')
assembly_group.add_argument('--assembly-coverage', required = False, default = 200, type = int, metavar = '<X>',
                    help = 'Downsample the provided reads to this coverage (default : %(default)sX)')
assembly_group.add_argument('--racon', required = False, default = False, action = 'store_true',
                    help = 'Force the generation a racon consenus (default : %(default)s)')
assembly_group.add_argument('--racon-rounds', required = False, default = 4, type = int, metavar = '<NUM_ROUNDS>',
                    help = 'Number of RACON rounds used to generate a consensus (default : %(default)s)')
assembly_group.add_argument('--no-medaka', required = False, default = False, action = 'store_true',
                    help = 'Skip Medaka polising of the ONT assembly (faster) (default : %(default)s)')
assembly_group.add_argument('--only-assemble', required = False, default = False, action = 'store_true',
                    help = 'Only carry out assembly steps with the given data; no downstream analysis.')
assembly_group.add_argument('--no-assembly', required = False, default = False, action = 'store_true',
                    help = 'Don\'t attempt to assembly/polish a given genome/set of reads (default : %(default)s)')


# Database/download options
download_group = parser.add_argument_group('Database downloading arguments')
download_group.add_argument('--download', required = False, default = False, action = 'store_true',
                            help = 'Attempt to download Kraken/Plasmid databases if not found locally.' +\
                            'Use witout other options.')

# Plasmid options
plasmid_group = parser.add_argument_group('Plasmid and vector search options')
plasmid_group.add_argument('--plasmids', required = False, default = False, action = 'store_true', 
                    help = 'Do a plasmid search (default : %(default)s)')
plasmid_group.add_argument('--plasmid-database', required = False, default = plasmid_database_default_fasta, metavar = '<PLASMID_FASTA>', 
                    help = 'Path to a FASTA file with reference plasmid sequences')


# AMR gene options
amr_group = parser.add_argument_group('AMR gene search options')
amr_group.add_argument('--amr-database', required = False, default = amr_database_default, metavar = '<AMR_FASTA>',
                    help = 'Path to a FASTA file with AMR gene sequences (default : %(default)s)')
amr_group.add_argument('--no-amr', required = False, default = False, action = 'store_true', 
                    help = 'Skip AMR search (default : %(default)s)')


# Inc group options
inc_group = parser.add_argument_group('Incompatibility group search options')
inc_group.add_argument('--inc-database', required = False, default = inc_database_default, metavar = '<INC_FASTA>',
                    help = 'Path to a FASTA file with incompatibility group sequences (default : %(default)s)')
inc_group.add_argument('--no-inc', required = False, default = False, action = 'store_true', 
                    help = 'Skip incompatibility group search (default : %(default)s)')


# Pull in custom feature sets
other_feature_group = parser.add_argument_group('Other feature search options')
other_feature_group.add_argument('--feature', required = False, default = None, metavar = '<FEATURE_FASTA>',
                                    action = 'append', help = 'Path to a FASTA file with feature sequences')


# Drawing options
drawing_group = parser.add_argument_group('Drawing options')
drawing_group.add_argument('--no-drawing', required = False, default = False, action = 'store_true',
                                    help = 'Skip drawing of contigs & Features (default : %(default)s)')


# Options for comparing to a reference genome
reference_group = parser.add_argument_group('Reference options')
reference_group.add_argument('--reference-dir', required = False, default = reference_dir_default, metavar = '<REFERNCE_DIR>',
                            help = 'Directory containing refrence organisms (default : %(default)s)' )
reference_group.add_argument('--organism', required = False, default = None, metavar = '<ORGANISM>',
                                help = 'Reference organism to compare against')
reference_group.add_argument('--list-organisms', required = False, action = 'store_true',
                                help = 'List the reference organisms available to this pipeline')
reference_group.add_argument('--auto-reference', required = False, default = False, action = 'store_true',
                                help = 'Automatically choose an appropriate reference if available.')
reference_group.add_argument('--reference-genome', required = False, default = None, metavar = '<GENOME_FASTA>',
                                help = 'Reference genome to compare against (default : %(default)s)')
reference_group.add_argument('--mutation-regions', required = False, default = None, metavar = '<REGION_BED>',
                                help = 'Regions in the reference genome to screen for mutations (default : %(default)s)')


# Other arguments
other_group = parser.add_argument_group('Other options')
other_group.add_argument('--name', required = False, type = str, default = 'Genome', metavar = '<NAME>',
                            help = 'Name of this analysis for reporting.')
other_group.add_argument('--threads', required = False, type=int, default = 1, metavar = '<NUM_THREADS>',
                    help = 'Number of worker threads to use (default : %(default)s)')
other_group.add_argument('--verbosity', required = False, type=int, default = 1, metavar = '<INT>',
                    help = 'How much information to print as PiMA runs (default : %(default)s)')
other_group.add_argument('--bundle', required = False, type=str, default = None, metavar = '<PATH>',
                    help = 'Local Tectonic bundle (default : %(default)s)')
other_group.add_argument('--fake-run', required = False, default = False, action = 'store_true',
                            help = 'Don\'t actually run the pipeline, just pretend to (default : %(default)s)')

# Handle Arguments
opts, Extra = parser.parse_known_args()
opts = vars(opts)

def constructPathO(Organism):
    reference = '/home/DockerDir/References/{0}/{0}.fasta'.format(Organism)
    mutation = '/home/DockerDir/References/{0}/{0}_r.bed'.format(Organism)
    print(reference)
    print(mutation)
    return(reference,mutation)

def constructPath(name):
    return('/home/DockerDir/mountpoint/'+name)

# Define Reference and mutation paths

if opts['help']:
    parser.print_help()
    sys.exit(0)

if opts['preloded_reference']:
    opts['reference-genome'],opts['mutation-regions'] = constructPathO(opts['Preloded_Reference'])

opts = {k: v for k, v in opts.items() if (v is not None) and (v is not False)}

print(opts)

for i in opts.keys():
    if opts[i] in [amr_database_default,amr_gene_drug_tsv,inc_database_default,
        plasmid_database_default_fasta,kraken_database_default,reference_dir_default,pima_css]:
        pass
    elif i in [
            'ont_fast5','ont_fastq','genome','plasmid_database',
            'amr_database','inc_database','reference_dir','reference_genome','mutation_regions']:
        opts[i] = constructPath(opts[i])
    elif i == 'illumina_fastq':
        opts[i] = map(constructPath,opts[i])
   
if not os.path.exists(opts['output']):
    os.makedirs(opts['output'])

def clean_value(string_val):
    if '=True' in string_val:
        return(string_val.split('=')[0])
    else:
        return(string_val)

def calldocker(opts):
    command_string = ' '.join(f'--{key.replace("_","-")}={value}' for key, value in opts.items())
    #Need to add a handler for just flags
    command = command_string.split(' ')
    command = list(map(clean_value,command))
    print(command)
    output_generator = docker.run(
        command=command,
        image='appliedbioinformaticslab/pimadocker2:latest',
        volumes=[(os.getcwd(),"/home/DockerDir/mountpoint/")],
                 #('pima',"/home/DockerDir/Data")],
        gpus="all",
        tty=True,
        interactive=True,
    )
    print('Logging:{0}'.format(datetime.now()))


# Execute Docker
print('Executing:{0}'.format(datetime.now()))
calldocker(opts)

#bash -m samples_dod/reference/Ames/mutation_regions.bed -q samples_dod/combined.fastq -r samples_dod/reference/ref_genome.fasta -o test
#bash pima.sh -m samples_dod/reference/Ames/mutation_regions.bed -q samples_dod/combined.fastq -R klebsiella_pneumoniae -o test